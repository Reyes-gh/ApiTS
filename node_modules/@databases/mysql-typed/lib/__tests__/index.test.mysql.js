"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const mysql_1 = require("@databases/mysql");
const __1 = require("..");
// JSON added in 5.7
const SUPPORTS_JSON_TYPE = !((_a = process.env.MYSQL_TEST_IMAGE) === null || _a === void 0 ? void 0 : _a.includes(`:5.6`));
const tables = (0, __1.default)({
    serializeValue(tableName, columnName, value) {
        if (tableName === `typed_queries_tests_photos` &&
            columnName === `metadata`) {
            return JSON.stringify(value);
        }
        return value;
    },
});
const users = tables.typed_queries_tests_users;
const photos = tables.typed_queries_tests_photos;
const db = (0, mysql_1.default)({ bigIntMode: 'number' });
afterAll(async () => {
    await db.dispose();
});
let t = test;
if (!SUPPORTS_JSON_TYPE)
    t = test.skip;
t('create schema', async () => {
    await db.query((0, mysql_1.sql) `
      CREATE TABLE typed_queries_tests_users (
        id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
        screen_name TEXT(512) NOT NULL,
        bio TEXT(512),
        age INT
      );
      CREATE TABLE typed_queries_tests_photos (
        id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
        owner_user_id BIGINT NOT NULL REFERENCES typed_queries_tests.users(id),
        cdn_url TEXT(512) NOT NULL,
        caption TEXT(512) NULL,
        metadata JSON NOT NULL
      );
    `);
});
t('create users', async () => {
    var _a, _b;
    await users(db).insert({ screen_name: 'Forbes' }, { screen_name: 'Ellie' });
    await photos(db).insert({
        cdn_url: 'http://example.com/1',
        metadata: {},
        owner_user_id: 1,
    }, {
        cdn_url: 'http://example.com/2',
        metadata: {},
        owner_user_id: 1,
    }, {
        cdn_url: 'http://example.com/3',
        metadata: {},
        owner_user_id: 1,
    }, {
        cdn_url: 'http://example.com/4',
        metadata: {},
        owner_user_id: 2,
        caption: null,
    });
    const photoRecords = await photos(db)
        .find({ owner_user_id: 1 })
        .orderByAsc('cdn_url')
        .limit(2);
    expect(photoRecords.map((p) => p.cdn_url)).toMatchInlineSnapshot(`
    Array [
      "http://example.com/1",
      "http://example.com/2",
    ]
  `);
    const photoRecordsDesc = await photos(db)
        .find({ owner_user_id: 1 })
        .orderByDesc('cdn_url')
        .limit(2);
    expect(photoRecordsDesc.map((p) => p.cdn_url)).toMatchInlineSnapshot(`
    Array [
      "http://example.com/3",
      "http://example.com/2",
    ]
  `);
    expect(await users(db).findOne({ id: 2 })).toEqual({
        id: 2,
        screen_name: 'Ellie',
        age: null,
        bio: null,
    });
    await photos(db).update({ cdn_url: 'http://example.com/1' }, {
        metadata: { rating: 5 },
    });
    await photos(db).delete({ cdn_url: 'http://example.com/2' });
    expect((await photos(db).find().orderByAsc('cdn_url').all()).map((u) => u.cdn_url)).toMatchInlineSnapshot(`
    Array [
      "http://example.com/1",
      "http://example.com/3",
      "http://example.com/4",
    ]
  `);
    expect((_a = (await users(db).find().orderByAsc('screen_name').first())) === null || _a === void 0 ? void 0 : _a.screen_name).toMatchInlineSnapshot(`"Ellie"`);
    expect((_b = (await users(db).find().orderByDesc('screen_name').first())) === null || _b === void 0 ? void 0 : _b.screen_name).toMatchInlineSnapshot(`"Forbes"`);
    expect((await users(db).find().orderByAsc('screen_name').all()).map((u) => [
        u.screen_name,
        u.bio,
    ])).toMatchInlineSnapshot(`
    Array [
      Array [
        "Ellie",
        null,
      ],
      Array [
        "Forbes",
        null,
      ],
    ]
  `);
    await photos(db).update({ cdn_url: 'http://example.com/3' }, { caption: 'Hello World' });
    expect(await photos(db).find({ caption: null }).orderByAsc('id').all()).toEqual((await photos(db).find().orderByAsc('id').all()).filter((p) => p.caption === null));
    expect((await photos(db).find({ caption: null }).orderByAsc('id').all()).map((p) => ({
        caption: p.caption,
        cdn_url: p.cdn_url,
    }))).toMatchInlineSnapshot(`
    Array [
      Object {
        "caption": null,
        "cdn_url": "http://example.com/1",
      },
      Object {
        "caption": null,
        "cdn_url": "http://example.com/4",
      },
    ]
  `);
});
//# sourceMappingURL=index.test.mysql.js.map