"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeSchema = exports.printSchema = void 0;
const shared_print_types_1 = require("@databases/shared-print-types");
const MySqlPrintOptions_1 = require("./MySqlPrintOptions");
const printSchema_1 = require("./printers/printSchema");
const GENERATED_STATEMENT = 'Generated by: @databases/pg-schema-print-types';
function filterSchema(unfilteredSchema, options) {
    const isTableIgnored = (0, shared_print_types_1.getIgnoreTest)(options);
    return {
        tables: unfilteredSchema.tables
            .filter((t) => !isTableIgnored(t.tableName))
            .map((t) => ({
            ...t,
            constraints: t.constraints.filter((c) => !isTableIgnored(c.tableName) &&
                !c.columns.some((c) => {
                    var _a;
                    return ((_a = c.referenced) === null || _a === void 0 ? void 0 : _a.tableName) &&
                        isTableIgnored(c.referenced.tableName);
                })),
        })),
    };
}
function getPrinter(unfilteredSchema, options) {
    const schema = filterSchema(unfilteredSchema, options);
    const opts = new MySqlPrintOptions_1.default(options, schema);
    const context = new shared_print_types_1.PrintContext(opts);
    (0, printSchema_1.default)(schema, context, opts);
    return context;
}
function printSchema(schema, options = {}) {
    return getPrinter(schema, options).getFiles();
}
exports.printSchema = printSchema;
async function writeSchema(schema, directory, options = {}) {
    await (0, shared_print_types_1.writeFiles)({
        context: getPrinter(schema, options),
        directory,
        generatedStatement: GENERATED_STATEMENT,
    });
}
exports.writeSchema = writeSchema;
//# sourceMappingURL=index.js.map