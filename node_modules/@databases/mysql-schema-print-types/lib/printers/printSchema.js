"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mysql_schema_introspect_1 = require("@databases/mysql-schema-introspect");
const printTableDetails_1 = require("./printTableDetails");
function printSchema(schema, context, options) {
    context.pushTypeDeclaration({ type: 'schema' }, (identifier, { getImport }) => [
        `interface ${identifier} {`,
        ...schema.tables
            .filter((table) => table.tableType === mysql_schema_introspect_1.TableType.BaseTable)
            .map((table) => {
            const { DatabaseRecord, InsertParameters } = (0, printTableDetails_1.default)(table, context, options);
            return `  ${table.tableName}: {record: ${getImport(DatabaseRecord)}, insert: ${getImport(InsertParameters)}};`;
        }),
        `}`,
    ]);
    context.pushValueDeclaration({ type: 'serializeValue' }, (identifier) => {
        const tables = schema.tables
            .filter((table) => table.tableType === mysql_schema_introspect_1.TableType.BaseTable)
            .map((table) => {
            const jsonAttributes = table.columns
                .filter((c) => c.type.kind === mysql_schema_introspect_1.DataType.json)
                .map((c) => c.columnName);
            return {
                tableName: table.tableName,
                jsonAttributes,
            };
        })
            .filter((table) => table.jsonAttributes.length > 0);
        if (!tables.length) {
            return [
                `function ${identifier}(_tableName: string, _columnName: string, value: unknown): unknown {`,
                `  return value;`,
                `}`,
            ];
        }
        const columnCondition = (columns) => columns.length === 0
            ? `false`
            : columns.length === 1
                ? `c === ${JSON.stringify(columns[0])}`
                : `(${columns
                    .map((columnName) => `c === ${JSON.stringify(columnName)}`)
                    .join(' || ')})`;
        const tableConditions = tables.map(({ tableName, jsonAttributes }) => `t === ${JSON.stringify(tableName)} && ${columnCondition(jsonAttributes)}`);
        return [
            `/**`,
            ` * JSON serialize values (v) if the table name (t) and column name (c)`,
            ` * is a JSON column.`,
            ` * This is necessary if you want to store values that are not plain objects`,
            ` * in a JSON column.`,
            ` */`,
            `function ${identifier}(t: string, c: string, v: unknown): unknown {`,
            `  if (${tableConditions.length === 1
                ? tableConditions[0]
                : `\n    ${tableConditions
                    .map((c) => `(${c})`)
                    .join(' ||\n    ')}\n  `}) {`,
            `    return JSON.stringify(v);`,
            `  }`,
            `  return v;`,
            `}`,
        ];
    });
}
exports.default = printSchema;
//# sourceMappingURL=printSchema.js.map