"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mysql_config_1 = require("@databases/mysql-config");
class MySqlPrintOptions {
    constructor(config, schema) {
        this._config = config;
        this._tables = new Map(schema.tables.map((t) => [`${t.schemaName}.${t.tableName}`, t]));
    }
    _v(key) {
        var _a;
        return (_a = this._config[key]) !== null && _a !== void 0 ? _a : mysql_config_1.DEFAULT_CONFIG.types[key];
    }
    getTable(key) {
        var _a;
        return (_a = this._tables.get(`${key.schemaName}.${key.tableName}`)) !== null && _a !== void 0 ? _a : null;
    }
    get primaryKeyTypeMode() {
        return this._v('primaryKeyTypeMode');
    }
    get columnTypeOverrides() {
        return this._v('columnTypeOverrides');
    }
    get typeOverrides() {
        return this._v('typeOverrides');
    }
    getExportPriority(id) {
        switch (id.type) {
            case 'schema':
                return 0;
            case 'table':
                return 1;
            case 'insert_parameters':
            case 'primary_key':
                return 2;
            case 'serializeValue':
                return 3;
        }
    }
    getExportNameTemplate(id) {
        switch (id.type) {
            case 'schema':
                return this._v('schemaTypeName');
            case 'table':
                return this._v('tableTypeName');
            case 'insert_parameters':
                return this._v('tableInsertParametersTypeName');
            case 'primary_key':
                return this._v('primaryKeyTypeName');
            case 'serializeValue':
                return this._v('serializeValueTypeName');
        }
    }
    getFilenameTemplate(id) {
        switch (id.type) {
            case 'schema':
                return this._v('schemaFileName');
            case 'table':
                return this._v('tableFileName');
            case 'insert_parameters':
                return this._v('tableInsertParametersFileName');
            case 'primary_key':
                return this._v('primaryKeyFileName');
            case 'serializeValue':
                return this._v('serializeValueFileName');
        }
    }
    getTemplateValues(id) {
        switch (id.type) {
            case 'schema':
            case 'serializeValue':
                return {};
            case 'table':
            case 'insert_parameters':
                return { TABLE_NAME: id.name };
            case 'primary_key':
                return {
                    TABLE_NAME: id.name,
                    COLUMN_NAME: id.columnName,
                };
        }
    }
}
exports.default = MySqlPrintOptions;
//# sourceMappingURL=MySqlPrintOptions.js.map