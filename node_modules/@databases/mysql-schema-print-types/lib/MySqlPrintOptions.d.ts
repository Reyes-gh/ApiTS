import { PrintOptions } from '@databases/shared-print-types';
import MySqlConfig from '@databases/mysql-config';
import TypeID from './TypeID';
import { Schema, TableDetails } from '@databases/mysql-schema-introspect';
export default class MySqlPrintOptions implements PrintOptions<TypeID> {
    private readonly _config;
    private readonly _tables;
    constructor(config: Partial<MySqlConfig['types']>, schema: Schema);
    private _v;
    getTable(key: {
        schemaName: string;
        tableName: string;
    }): TableDetails | null;
    get primaryKeyTypeMode(): import("@databases/mysql-config/lib/MySqlConfig").MySqlTypesPrimaryKeyTypeMode;
    get columnTypeOverrides(): {
        [x: string]: string | undefined;
    };
    get typeOverrides(): {
        [x: string]: string | undefined;
    };
    getExportPriority(id: TypeID): number;
    getExportNameTemplate(id: TypeID): string;
    getFilenameTemplate(id: TypeID): string;
    getTemplateValues(id: TypeID): {
        TABLE_NAME?: undefined;
        COLUMN_NAME?: undefined;
    } | {
        TABLE_NAME: string;
        COLUMN_NAME?: undefined;
    } | {
        TABLE_NAME: string;
        COLUMN_NAME: string;
    };
}
declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
declare type CheckForUnion<T> = [T] extends [UnionToIntersection<T>] ? unknown : never;
/**
 * Only accept a single type, not a union of types
 */
export declare type Literal<TValue> = TValue & CheckForUnion<TValue>;
export {};
