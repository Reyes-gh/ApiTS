import * as t from 'funtypes';
import DataType from './enums/DataType';
declare const SimpleColumnTypeSchema: t.Named<t.Object<{
    kind: t.Union<[t.Literal<DataType.bigint>, t.Literal<DataType.blob>, t.Literal<DataType.date>, t.Literal<DataType.datetime>, t.Literal<DataType.double>, t.Literal<DataType.float>, t.Literal<DataType.geometry>, t.Literal<DataType.geomcollection>, t.Literal<DataType.int>, t.Literal<DataType.json>, t.Literal<DataType.linestring>, t.Literal<DataType.longblob>, t.Literal<DataType.longtext>, t.Literal<DataType.mediumblob>, t.Literal<DataType.mediumint>, t.Literal<DataType.mediumtext>, t.Literal<DataType.multilinestring>, t.Literal<DataType.multipoint>, t.Literal<DataType.multipolygon>, t.Literal<DataType.point>, t.Literal<DataType.polygon>, t.Literal<DataType.smallint>, t.Literal<DataType.text>, t.Literal<DataType.time>, t.Literal<DataType.timestamp>, t.Literal<DataType.tinyblob>, t.Literal<DataType.tinyint>, t.Literal<DataType.tinytext>, t.Literal<DataType.year>]>;
}, false>>;
export declare type SimpleColumnType = t.Static<typeof SimpleColumnTypeSchema>;
declare const DecimalTypeSchema: t.Named<t.Object<{
    kind: t.Literal<DataType.decimal>;
    /**
     * aka "numeric_precision"
     */
    digits: t.Constraint<t.Number, number, unknown>;
    /**
     * aka "numeric_scale"
     */
    decimals: t.Constraint<t.Number, number, unknown>;
}, false>>;
export declare type DecimalType = t.Static<typeof DecimalTypeSchema>;
declare const EnumTypeSchema: t.Named<t.Object<{
    kind: t.Literal<DataType.enum>;
    values: t.Array<t.String>;
}, false>>;
export declare type EnumType = t.Static<typeof EnumTypeSchema>;
declare const SetTypeSchema: t.Named<t.Object<{
    kind: t.Literal<DataType.set>;
    values: t.Array<t.String>;
}, false>>;
export declare type SetType = t.Static<typeof SetTypeSchema>;
declare const ColumnTypeWithLengthSchema: t.Named<t.Object<{
    kind: t.Union<[t.Literal<DataType.binary>, t.Literal<DataType.bit>, t.Literal<DataType.char>, t.Literal<DataType.varbinary>, t.Literal<DataType.varchar>]>;
    length: t.Constraint<t.Number, number, unknown>;
}, false>>;
export declare type ColumnTypeWithLength = t.Static<typeof ColumnTypeWithLengthSchema>;
export declare const ColumnTypeSchema: t.Union<[t.Named<t.Object<{
    kind: t.Union<[t.Literal<DataType.bigint>, t.Literal<DataType.blob>, t.Literal<DataType.date>, t.Literal<DataType.datetime>, t.Literal<DataType.double>, t.Literal<DataType.float>, t.Literal<DataType.geometry>, t.Literal<DataType.geomcollection>, t.Literal<DataType.int>, t.Literal<DataType.json>, t.Literal<DataType.linestring>, t.Literal<DataType.longblob>, t.Literal<DataType.longtext>, t.Literal<DataType.mediumblob>, t.Literal<DataType.mediumint>, t.Literal<DataType.mediumtext>, t.Literal<DataType.multilinestring>, t.Literal<DataType.multipoint>, t.Literal<DataType.multipolygon>, t.Literal<DataType.point>, t.Literal<DataType.polygon>, t.Literal<DataType.smallint>, t.Literal<DataType.text>, t.Literal<DataType.time>, t.Literal<DataType.timestamp>, t.Literal<DataType.tinyblob>, t.Literal<DataType.tinyint>, t.Literal<DataType.tinytext>, t.Literal<DataType.year>]>;
}, false>>, t.Named<t.Object<{
    kind: t.Literal<DataType.decimal>;
    /**
     * aka "numeric_precision"
     */
    digits: t.Constraint<t.Number, number, unknown>;
    /**
     * aka "numeric_scale"
     */
    decimals: t.Constraint<t.Number, number, unknown>;
}, false>>, t.Named<t.Object<{
    kind: t.Literal<DataType.enum>;
    values: t.Array<t.String>;
}, false>>, t.Named<t.Object<{
    kind: t.Literal<DataType.set>;
    values: t.Array<t.String>;
}, false>>, t.Named<t.Object<{
    kind: t.Union<[t.Literal<DataType.binary>, t.Literal<DataType.bit>, t.Literal<DataType.char>, t.Literal<DataType.varbinary>, t.Literal<DataType.varchar>]>;
    length: t.Constraint<t.Number, number, unknown>;
}, false>>]>;
export declare type ColumnType = t.Static<typeof ColumnTypeSchema>;
export default function getColumnType(column: {
    data_type: DataType;
    column_type: string;
    character_maximum_length: number;
    numeric_precision: number;
    numeric_scale: number;
}): ColumnType;
export {};
