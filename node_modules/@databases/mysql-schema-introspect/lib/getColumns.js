"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const t = require("funtypes");
const mysql_1 = require("@databases/mysql");
const getColumnType_1 = require("./getColumnType");
const getTables_1 = require("./getTables");
const ColumnSchema = t.Object({
    schemaName: t.String,
    tableName: t.String,
    columnName: t.String,
    ordinalPosition: t.Number,
    isPrimaryKey: t.Boolean,
    isNullable: t.Boolean,
    default: t.Union(t.Null, t.String),
    type: getColumnType_1.ColumnTypeSchema,
    comment: t.String,
});
async function getColumns(connection, query) {
    const conditions = (0, getTables_1.tableQuery)(query);
    if (query.columnName) {
        conditions.push((0, mysql_1.sql) `COLUMN_NAME = ${query.columnName}`);
    }
    const columns = await connection.query((0, mysql_1.sql) `
    SELECT
      TABLE_SCHEMA as "schema_name",
      TABLE_NAME as "table_name",
      COLUMN_NAME as "column_name",
      ORDINAL_POSITION as "ordinal_position",

      COLUMN_DEFAULT as "column_default",
      IS_NULLABLE as "is_nullable",
      DATA_TYPE as "data_type",
      COLUMN_TYPE as "column_type",

      COLUMN_COMMENT as "column_comment",

      CHARACTER_MAXIMUM_LENGTH as "character_maximum_length",
      CHARACTER_OCTET_LENGTH as "character_octet_length",
      NUMERIC_PRECISION as "numeric_precision",
      NUMERIC_SCALE as "numeric_scale",
      DATETIME_PRECISION as "datetime_precision",
      CHARACTER_SET_NAME as "character_set_name",
      COLLATION_NAME as "collation_name",
      COLUMN_KEY as "column_key",
      EXTRA as "extra"
    FROM INFORMATION_SCHEMA.COLUMNS
    ${conditions.length ? (0, mysql_1.sql) `WHERE ${mysql_1.sql.join(conditions, (0, mysql_1.sql) ` AND `)}` : (0, mysql_1.sql) ``}
    ORDER BY TABLE_SCHEMA ASC, TABLE_NAME ASC, COLUMN_NAME ASC;
  `);
    return columns
        .map((c) => ({
        schemaName: c.schema_name,
        tableName: c.table_name,
        columnName: c.column_name,
        ordinalPosition: c.ordinal_position,
        default: c.column_default,
        isNullable: c.is_nullable === 'YES',
        type: (0, getColumnType_1.default)(c),
        comment: c.column_comment,
        isPrimaryKey: c.column_key === 'PRI',
    }))
        .map((t) => ColumnSchema.parse(t));
}
exports.default = getColumns;
//# sourceMappingURL=getColumns.js.map